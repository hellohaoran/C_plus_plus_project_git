PTHREAD_COND_TIMEDWAIT(3POSIX)                                                                       POSIX Programmer's Manual                                                                      PTHREAD_COND_TIMEDWAIT(3POSIX)

PPRROOLLOOGG
       This  manual page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or the interface may not be
       implemented on Linux.

NNAAMMEE
       pthread_cond_timedwait, pthread_cond_wait — wait on a condition

SSYYNNOOPPSSIISS
       #include <pthread.h>

       int pthread_cond_timedwait(pthread_cond_t *restrict _c_o_n_d,
           pthread_mutex_t *restrict _m_u_t_e_x,
           const struct timespec *restrict _a_b_s_t_i_m_e);
       int pthread_cond_wait(pthread_cond_t *restrict _c_o_n_d,
           pthread_mutex_t *restrict _m_u_t_e_x);

DDEESSCCRRIIPPTTIIOONN
       The _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() and _p_t_h_r_e_a_d___c_o_n_d___w_a_i_t() functions shall block on a condition variable. The application shall ensure that these functions are called with _m_u_t_e_x locked by the calling thread; otherwise, an er‐
       ror (for PTHREAD_MUTEX_ERRORCHECK and robust mutexes) or undefined behavior (for other mutexes) results.

       These functions atomically release _m_u_t_e_x and cause the calling thread to block on the condition variable _c_o_n_d; atomically here means ``atomically with respect to access by another thread to the mutex and then the condi‐
       tion variable''. That is, if another thread is able to acquire the mutex after the about-to-block thread has released it, then a subsequent call to _p_t_h_r_e_a_d___c_o_n_d___b_r_o_a_d_c_a_s_t() or _p_t_h_r_e_a_d___c_o_n_d___s_i_g_n_a_l() in that thread  shall
       behave as if it were issued after the about-to-block thread has blocked.

       Upon  successful  return,  the  mutex  shall have been locked and shall be owned by the calling thread. If _m_u_t_e_x is a robust mutex where an owner terminated while holding the lock and the state is recoverable, the mutex
       shall be acquired even though the function returns an error code.

       When using condition variables there is always a Boolean predicate involving shared variables associated with each condition wait that is true if the thread should proceed. Spurious wakeups from the  _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_‐
       _w_a_i_t()  or  _p_t_h_r_e_a_d___c_o_n_d___w_a_i_t()  functions may occur. Since the return from _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() or _p_t_h_r_e_a_d___c_o_n_d___w_a_i_t() does not imply anything about the value of this predicate, the predicate should be re-evaluated
       upon such return.

       When a thread waits on a condition variable, having specified a particular mutex to either the _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() or the _p_t_h_r_e_a_d___c_o_n_d___w_a_i_t() operation, a dynamic binding is formed between that mutex and  condition
       variable that remains in effect as long as at least one thread is blocked on the condition variable. During this time, the effect of an attempt by any thread to wait on that condition variable using a different mutex is
       undefined. Once all waiting threads have been unblocked (as by the _p_t_h_r_e_a_d___c_o_n_d___b_r_o_a_d_c_a_s_t() operation), the next wait operation on that condition variable shall form a new dynamic binding with  the  mutex  specified  by
       that  wait operation. Even though the dynamic binding between condition variable and mutex may be removed or replaced between the time a thread is unblocked from a wait on the condition variable and the time that it re‐
       turns to the caller or begins cancellation cleanup, the unblocked thread shall always re-acquire the mutex specified in the condition wait operation call from which it is returning.

       A condition wait (whether timed or not) is a cancellation point. When the cancelability type of a thread is set to PTHREAD_CANCEL_DEFERRED, a side-effect of acting upon a cancellation request while in a  condition  wait
       is  that  the  mutex  is  (in  effect)  re-acquired  before calling the first cancellation cleanup handler. The effect is as if the thread were unblocked, allowed to execute up to the point of returning from the call to
       _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() or _p_t_h_r_e_a_d___c_o_n_d___w_a_i_t(), but at that point notices the cancellation request and instead of returning to the caller of _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() or _p_t_h_r_e_a_d___c_o_n_d___w_a_i_t(), starts the thread  cancella‐
       tion activities, which includes calling cancellation cleanup handlers.

       A  thread  that  has been unblocked because it has been canceled while blocked in a call to _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() or _p_t_h_r_e_a_d___c_o_n_d___w_a_i_t() shall not consume any condition signal that may be directed concurrently at the
       condition variable if there are other threads blocked on the condition variable.

       The _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() function shall be equivalent to _p_t_h_r_e_a_d___c_o_n_d___w_a_i_t(), except that an error is returned if the absolute time specified by _a_b_s_t_i_m_e passes (that is, system time equals or exceeds _a_b_s_t_i_m_e) before
       the  condition  _c_o_n_d is signaled or broadcasted, or if the absolute time specified by _a_b_s_t_i_m_e has already been passed at the time of the call. When such timeouts occur, _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() shall nonetheless release
       and re-acquire the mutex referenced by _m_u_t_e_x, and may consume a condition signal directed concurrently at the condition variable.

       The condition variable shall have a clock attribute which specifies the clock that shall be used to measure the time specified by the _a_b_s_t_i_m_e argument. The _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() function is also a cancellation point.

       If a signal is delivered to a thread waiting for a condition variable, upon return from the signal handler the thread resumes waiting for the condition variable as if it was not interrupted, or it shall return zero  due
       to spurious wakeup.

       The behavior is undefined if the value specified by the _c_o_n_d or _m_u_t_e_x argument to these functions does not refer to an initialized condition variable or an initialized mutex object, respectively.

RREETTUURRNN VVAALLUUEE
       Except  in  the  case of [[EETTIIMMEEDDOOUUTT]], all these error checks shall act as if they were performed immediately at the beginning of processing for the function and shall cause an error return, in effect, prior to modifying
       the state of the mutex specified by _m_u_t_e_x or the condition variable specified by _c_o_n_d.

       Upon successful completion, a value of zero shall be returned; otherwise, an error number shall be returned to indicate the error.

EERRRROORRSS
       These functions shall fail if:

       EENNOOTTRREECCOOVVEERRAABBLLEE
              The state protected by the mutex is not recoverable.

       EEOOWWNNEERRDDEEAADD
              The mutex is a robust mutex and the process containing the previous owning thread terminated while holding the mutex lock. The mutex lock shall be acquired by the calling thread and it is up to the new  owner  to
              make the state consistent.

       EEPPEERRMM  The mutex type is PTHREAD_MUTEX_ERRORCHECK or the mutex is a robust mutex, and the current thread does not own the mutex.

       The _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() function shall fail if:

       EETTIIMMEEDDOOUUTT
              The time specified by _a_b_s_t_i_m_e to _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() has passed.

       EEIINNVVAALL The _a_b_s_t_i_m_e argument specified a nanosecond value less than zero or greater than or equal to 1000 million.

       These functions may fail if:

       EEOOWWNNEERRDDEEAADD
              The  mutex  is a robust mutex and the previous owning thread terminated while holding the mutex lock. The mutex lock shall be acquired by the calling thread and it is up to the new owner to make the state consis‐
              tent.

       These functions shall not return an error code of [[EEIINNTTRR]].

       _T_h_e _f_o_l_l_o_w_i_n_g _s_e_c_t_i_o_n_s _a_r_e _i_n_f_o_r_m_a_t_i_v_e_.

EEXXAAMMPPLLEESS
       None.

AAPPPPLLIICCAATTIIOONN UUSSAAGGEE
       Applications that have assumed that non-zero return values are errors will need updating for use with robust mutexes, since a valid return for a thread acquiring a mutex which  is  protecting  a  currently  inconsistent
       state  is  [[EEOOWWNNEERRDDEEAADD]].   Applications that do not check the error returns, due to ruling out the possibility of such errors arising, should not use robust mutexes. If an application is supposed to work with normal and
       robust mutexes, it should check all return values for error conditions and if necessary take appropriate action.

RRAATTIIOONNAALLEE
       If an implementation detects that the value specified by the _c_o_n_d argument to _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() or _p_t_h_r_e_a_d___c_o_n_d___w_a_i_t() does not refer to an initialized condition variable, or detects that the value  specified  by
       the _m_u_t_e_x argument to _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() or _p_t_h_r_e_a_d___c_o_n_d___w_a_i_t() does not refer to an initialized mutex object, it is recommended that the function should fail and report an [[EEIINNVVAALL]] error.

   CCoonnddiittiioonn WWaaiitt SSeemmaannttiiccss
       It  is  important  to note that when _p_t_h_r_e_a_d___c_o_n_d___w_a_i_t() and _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() return without error, the associated predicate may still be false.  Similarly, when _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() returns with the timeout
       error, the associated predicate may be true due to an unavoidable race between the expiration of the timeout and the predicate state change.

       The application needs to recheck the predicate on any return because it cannot be sure there is another thread waiting on the thread to handle the signal, and if there is not then the signal is lost. The  burden  is  on
       the application to check the predicate.

       Some implementations, particularly on a multi-processor, may sometimes cause multiple threads to wake up when the condition variable is signaled simultaneously on different processors.

       In general, whenever a condition wait returns, the thread has to re-evaluate the predicate associated with the condition wait to determine whether it can safely proceed, should wait again, or should declare a timeout. A
       return from the wait does not imply that the associated predicate is either true or false.

       It is thus recommended that a condition wait be enclosed in the equivalent of a ``while loop'' that checks the predicate.

   TTiimmeedd WWaaiitt SSeemmaannttiiccss
       An absolute time measure was chosen for specifying the timeout parameter for two reasons. First, a relative time measure can be easily implemented on top of a function that specifies absolute time, but there is  a  race
       condition associated with specifying an absolute timeout on top of a function that specifies relative timeouts. For example, assume that _c_l_o_c_k___g_e_t_t_i_m_e() returns the current time and _c_o_n_d___r_e_l_a_t_i_v_e___t_i_m_e_d___w_a_i_t() uses rela‐
       tive timeouts:

           cclloocckk__ggeettttiimmee((CCLLOOCCKK__RREEAALLTTIIMMEE,, &&nnooww))
           rreellttiimmee == sslleeeepp__ttiill__tthhiiss__aabbssoolluuttee__ttiimmee --nnooww;;
           ccoonndd__rreellaattiivvee__ttiimmeedd__wwaaiitt((cc,, mm,, &&rreellttiimmee));;

       If the thread is preempted between the first statement and the last statement, the thread blocks for too long. Blocking, however, is irrelevant if an absolute timeout is used. An absolute timeout also need not be recom‐
       puted if it is used multiple times in a loop, such as that enclosing a condition wait.

       For cases when the system clock is advanced discontinuously by an operator, it is expected that implementations process any timed wait expiring at an intervening time as if that time had actually occurred.

   CCaanncceellllaattiioonn aanndd CCoonnddiittiioonn WWaaiitt
       A  condition  wait,  whether  timed or not, is a cancellation point. That is, the functions _p_t_h_r_e_a_d___c_o_n_d___w_a_i_t() or _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() are points where a pending (or concurrent) cancellation request is noticed. The
       reason for this is that an indefinite wait is possible at these points—whatever event is being waited for, even if the program is totally correct, might never occur; for example, some  input  data  being  awaited  might
       never be sent. By making condition wait a cancellation point, the thread can be canceled and perform its cancellation cleanup handler even though it may be stuck in some indefinite wait.

       A  side-effect  of  acting  on a cancellation request while a thread is blocked on a condition variable is to re-acquire the mutex before calling any of the cancellation cleanup handlers. This is done in order to ensure
       that the cancellation cleanup handler is executed in the same state as the critical code that lies both before and after the call to the condition wait function. This rule is also  required  when  interfacing  to  POSIX
       threads  from  languages,  such  as Ada or C++, which may choose to map cancellation onto a language exception; this rule ensures that each exception handler guarding a critical section can always safely depend upon the
       fact that the associated mutex has already been locked regardless of exactly where within the critical section the exception was raised. Without this rule, there would not be a uniform rule that exception handlers could
       follow regarding the lock, and so coding would become very cumbersome.

       Therefore, since _s_o_m_e statement has to be made regarding the state of the lock when a cancellation is delivered during a wait, a definition has been chosen that makes application coding most convenient and error free.

       When  acting  on a cancellation request while a thread is blocked on a condition variable, the implementation is required to ensure that the thread does not consume any condition signals directed at that condition vari‐
       able if there are any other threads waiting on that condition variable. This rule is specified in order to avoid deadlock conditions that could occur if these two independent requests (one acting on  a  thread  and  the
       other acting on the condition variable) were not processed independently.

   PPeerrffoorrmmaannccee ooff MMuutteexxeess aanndd CCoonnddiittiioonn VVaarriiaabblleess
       Mutexes  are  expected  to be locked only for a few instructions. This practice is almost automatically enforced by the desire of programmers to avoid long serial regions of execution (which would reduce total effective
       parallelism).

       When using mutexes and condition variables, one tries to ensure that the usual case is to lock the mutex, access shared data, and unlock the mutex. Waiting on a condition variable should be a relatively rare  situation.
       For  example, when implementing a read-write lock, code that acquires a read-lock typically needs only to increment the count of readers (under mutual-exclusion) and return. The calling thread would actually wait on the
       condition variable only when there is already an active writer. So the efficiency of a synchronization operation is bounded by the cost of mutex lock/unlock and not by condition wait. Note that in the usual  case  there
       is no context switch.

       This  is  not  to  say that the efficiency of condition waiting is unimportant. Since there needs to be at least one context switch per Ada rendezvous, the efficiency of waiting on a condition variable is important. The
       cost of waiting on a condition variable should be little more than the minimal cost for a context switch plus the time to unlock and lock the mutex.

   FFeeaattuurreess ooff MMuutteexxeess aanndd CCoonnddiittiioonn VVaarriiaabblleess
       It had been suggested that the mutex acquisition and release be decoupled from condition wait. This was rejected because it is the combined nature of the operation that, in fact,  facilitates  realtime  implementations.
       Those  implementations  can atomically move a high-priority thread between the condition variable and the mutex in a manner that is transparent to the caller. This can prevent extra context switches and provide more de‐
       terministic acquisition of a mutex when the waiting thread is signaled. Thus, fairness and priority issues can be dealt with directly by the scheduling discipline.  Furthermore,  the  current  condition  wait  operation
       matches existing practice.

   SScchheedduulliinngg BBeehhaavviioorr ooff MMuutteexxeess aanndd CCoonnddiittiioonn VVaarriiaabblleess
       Synchronization  primitives  that  attempt to interfere with scheduling policy by specifying an ordering rule are considered undesirable.  Threads waiting on mutexes and condition variables are selected to proceed in an
       order dependent upon the scheduling policy rather than in some fixed order (for example, FIFO or priority). Thus, the scheduling policy determines which thread(s) are awakened and allowed to proceed.

   TTiimmeedd CCoonnddiittiioonn WWaaiitt
       The _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t() function allows an application to give up waiting for a particular condition after a given amount of time. An example of its use follows:

           ((vvooiidd)) pptthhrreeaadd__mmuutteexx__lloocckk((&&tt..mmnn));;
               tt..wwaaiitteerrss++++;;
               cclloocckk__ggeettttiimmee((CCLLOOCCKK__RREEAALLTTIIMMEE,, &&ttss));;
               ttss..ttvv__sseecc ++== 55;;
               rrcc == 00;;
               wwhhiillee ((!! mmyypprreeddiiccaattee((&&tt)) &&&& rrcc ==== 00))
                   rrcc == pptthhrreeaadd__ccoonndd__ttiimmeeddwwaaiitt((&&tt..ccoonndd,, &&tt..mmnn,, &&ttss));;
               tt..wwaaiitteerrss----;;
               iiff ((rrcc ==== 00 |||| mmyypprreeddiiccaattee((&&tt))))
                   sseettmmyyssttaattee((&&tt));;
           ((vvooiidd)) pptthhrreeaadd__mmuutteexx__uunnlloocckk((&&tt..mmnn));;

       By making the timeout parameter absolute, it does not need to be recomputed each time the program checks its blocking predicate. If the timeout was relative, it would have to be recomputed before each call.  This  would
       be  especially  difficult since such code would need to take into account the possibility of extra wakeups that result from extra broadcasts or signals on the condition variable that occur before either the predicate is
       true or the timeout is due.

FFUUTTUURREE DDIIRREECCTTIIOONNSS
       None.

SSEEEE AALLSSOO
       _p_t_h_r_e_a_d___c_o_n_d___b_r_o_a_d_c_a_s_t()

       The Base Definitions volume of POSIX.1‐2008, _S_e_c_t_i_o_n _4_._1_1, _M_e_m_o_r_y _S_y_n_c_h_r_o_n_i_z_a_t_i_o_n, <<pptthhrreeaadd..hh>>

CCOOPPYYRRIIGGHHTT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, Copyright (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008 with the 2013 Technical Corrigendum 1 applied.) In the event of any discrep‐
       ancy between this version and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.unix.org/on‐
       line.html .

       Any  typographical  or  formatting  errors  that  appear  in  this  page  are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                            2013                                                                                 PTHREAD_COND_TIMEDWAIT(3POSIX)
